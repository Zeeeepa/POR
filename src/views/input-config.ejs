<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Input Configuration - Depla Project Manager</title>
  <link rel="stylesheet" href="/css/shared.css">
  <style>
    .input-config-container {
      display: grid;
      grid-template-columns: 1fr;
      gap: 20px;
      margin-top: 20px;
    }
    
    @media (min-width: 768px) {
      .input-config-container {
        grid-template-columns: 1fr 1fr;
      }
    }
    
    .input-points-list {
      background-color: #f5f5f5;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .input-points-list table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    
    .input-points-list th, .input-points-list td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    
    .input-points-list th {
      background-color: #f0f0f0;
    }
    
    .default-point {
      background-color: #e6f7ff;
    }
    
    .add-input-point, .edit-input-point, .automation-settings {
      background-color: #f5f5f5;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    .form-group input[type="text"],
    .form-group input[type="number"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .form-group.checkbox {
      display: flex;
      align-items: center;
    }
    
    .form-group.checkbox label {
      margin-bottom: 0;
      margin-left: 10px;
    }
    
    .button-group {
      display: flex;
      gap: 10px;
      margin-top: 15px;
    }
    
    button {
      padding: 8px 16px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    
    .capture-button, .save-button {
      background-color: #4caf50;
      color: white;
    }
    
    .cancel-button {
      background-color: #f44336;
      color: white;
    }
    
    .message {
      padding: 10px;
      margin-bottom: 15px;
      border-radius: 4px;
    }
    
    .message-success {
      background-color: #dff0d8;
      color: #3c763d;
      border: 1px solid #d6e9c6;
    }
    
    .message-error {
      background-color: #f2dede;
      color: #a94442;
      border: 1px solid #ebccd1;
    }
    
    .message-info {
      background-color: #d9edf7;
      color: #31708f;
      border: 1px solid #bce8f1;
    }
  </style>
</head>
<body>
  <header>
    <h1>Depla Project Manager</h1>
    <nav>
      <ul>
        <li><a href="/">Dashboard</a></li>
        <li><a href="/projects">Projects</a></li>
        <li><a href="/input-config" class="active">Input Configuration</a></li>
        <li><a href="/settings">Settings</a></li>
      </ul>
    </nav>
  </header>
  
  <main>
    <h2>Input Configuration</h2>
    
    <div id="react-app"></div>
    
    <div class="input-config-container">
      <div class="input-points-list">
        <h3>Input Points</h3>
        <p>Loading input points...</p>
      </div>
      
      <div class="add-input-point">
        <h3>Add New Input Point</h3>
        <form id="add-input-point-form">
          <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>
          </div>
          
          <div class="form-group">
            <label for="description">Description:</label>
            <input type="text" id="description" name="description">
          </div>
          
          <div class="form-group">
            <label for="application">Application:</label>
            <input type="text" id="application" name="application">
          </div>
          
          <button type="button" id="capture-button" class="capture-button">Capture Position</button>
        </form>
      </div>
      
      <div class="automation-settings">
        <h3>Automation Settings</h3>
        <form id="automation-settings-form">
          <div class="form-group">
            <label for="clickDelay">Click Delay (ms):</label>
            <input type="number" id="clickDelay" name="clickDelay" value="500" min="0" max="5000">
          </div>
          
          <div class="form-group">
            <label for="typeDelay">Type Delay (ms):</label>
            <input type="number" id="typeDelay" name="typeDelay" value="10" min="0" max="1000">
          </div>
          
          <div class="form-group checkbox">
            <input type="checkbox" id="enableAutomation" name="enableAutomation" checked>
            <label for="enableAutomation">Enable Automation</label>
          </div>
          
          <button type="submit" class="save-button">Save Settings</button>
        </form>
      </div>
    </div>
  </main>
  
  <script>
    // This script will be replaced by the React app in production
    document.addEventListener('DOMContentLoaded', function() {
      // Placeholder for React app
      document.getElementById('react-app').innerHTML = '<p>React app will be loaded here in production.</p>';
      
      // Load input points
      fetch('/api/input-config/points')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const inputPointsList = document.querySelector('.input-points-list');
            
            if (data.inputPoints.length === 0) {
              inputPointsList.innerHTML = '<h3>Input Points</h3><p>No input points configured yet. Add one using the form.</p>';
              return;
            }
            
            let html = `
              <h3>Input Points</h3>
              <table>
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Coordinates</th>
                    <th>Description</th>
                    <th>Application</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
            `;
            
            data.inputPoints.forEach(point => {
              const isDefault = point.name === data.defaultInputPoint;
              
              html += `
                <tr class="${isDefault ? 'default-point' : ''}">
                  <td>${point.name}</td>
                  <td>(${point.x}, ${point.y})</td>
                  <td>${point.description || ''}</td>
                  <td>${point.application || ''}</td>
                  <td>
                    <button onclick="editInputPoint('${point.name}')">Edit</button>
                    <button onclick="deleteInputPoint('${point.name}')">Delete</button>
                    <button onclick="testInputPoint('${point.name}')">Test</button>
                    ${!isDefault ? `<button onclick="setAsDefault('${point.name}')">Set as Default</button>` : ''}
                  </td>
                </tr>
              `;
            });
            
            html += '</tbody></table>';
            
            inputPointsList.innerHTML = html;
          } else {
            showMessage('Failed to load input points', 'error');
          }
        })
        .catch(error => {
          showMessage('Error loading input points: ' + error.message, 'error');
        });
      
      // Load automation settings
      fetch('/api/input-config/settings')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            document.getElementById('clickDelay').value = data.clickDelay;
            document.getElementById('typeDelay').value = data.typeDelay;
            document.getElementById('enableAutomation').checked = data.enableAutomation;
          }
        })
        .catch(error => {
          showMessage('Error loading automation settings: ' + error.message, 'error');
        });
      
      // Capture button click handler
      document.getElementById('capture-button').addEventListener('click', function() {
        const name = document.getElementById('name').value;
        const description = document.getElementById('description').value;
        const application = document.getElementById('application').value;
        
        if (!name) {
          showMessage('Please enter a name for the input point', 'error');
          return;
        }
        
        showMessage('Move your cursor to the desired position and press Enter', 'info');
        
        const handleKeyPress = function(e) {
          if (e.key === 'Enter') {
            // Remove event listener
            window.removeEventListener('keydown', handleKeyPress);
            
            // Capture position
            fetch('/api/input-config/capture', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                name,
                description,
                application
              })
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                showMessage('Input point captured successfully', 'success');
                
                // Reset form
                document.getElementById('name').value = '';
                document.getElementById('description').value = '';
                document.getElementById('application').value = '';
                
                // Reload input points
                window.location.reload();
              } else {
                showMessage('Failed to capture input point: ' + data.error, 'error');
              }
            })
            .catch(error => {
              showMessage('Error capturing input point: ' + error.message, 'error');
            });
          }
        };
        
        window.addEventListener('keydown', handleKeyPress);
      });
      
      // Automation settings form submit handler
      document.getElementById('automation-settings-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const clickDelay = parseInt(document.getElementById('clickDelay').value, 10);
        const typeDelay = parseInt(document.getElementById('typeDelay').value, 10);
        const enableAutomation = document.getElementById('enableAutomation').checked;
        
        fetch('/api/input-config/settings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            clickDelay,
            typeDelay,
            enableAutomation
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showMessage('Automation settings saved successfully', 'success');
          } else {
            showMessage('Failed to save automation settings: ' + data.error, 'error');
          }
        })
        .catch(error => {
          showMessage('Error saving automation settings: ' + error.message, 'error');
        });
      });
    });
    
    // Helper functions
    function showMessage(text, type = 'info') {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message message-${type}`;
      messageDiv.textContent = text;
      
      const main = document.querySelector('main');
      main.insertBefore(messageDiv, main.firstChild);
      
      // Auto-hide message after 5 seconds
      setTimeout(() => {
        messageDiv.remove();
      }, 5000);
    }
    
    function editInputPoint(name) {
      // In a real implementation, this would open an edit form
      alert('Edit functionality will be implemented in the React app');
    }
    
    function deleteInputPoint(name) {
      if (confirm(`Are you sure you want to delete the input point "${name}"?`)) {
        fetch(`/api/input-config/points/${name}`, {
          method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showMessage('Input point deleted successfully', 'success');
            window.location.reload();
          } else {
            showMessage('Failed to delete input point: ' + data.error, 'error');
          }
        })
        .catch(error => {
          showMessage('Error deleting input point: ' + error.message, 'error');
        });
      }
    }
    
    function testInputPoint(name) {
      fetch(`/api/input-config/points/${name}/test`, {
        method: 'POST'
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showMessage('Test click sent to input point', 'success');
        } else {
          showMessage('Failed to test input point: ' + data.error, 'error');
        }
      })
      .catch(error => {
        showMessage('Error testing input point: ' + error.message, 'error');
      });
    }
    
    function setAsDefault(name) {
      fetch(`/api/input-config/points/${name}/default`, {
        method: 'POST'
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showMessage(`${name} set as default input point`, 'success');
          window.location.reload();
        } else {
          showMessage('Failed to set default input point: ' + data.error, 'error');
        }
      })
      .catch(error => {
        showMessage('Error setting default input point: ' + error.message, 'error');
      });
    }
  </script>
</body>
</html>
